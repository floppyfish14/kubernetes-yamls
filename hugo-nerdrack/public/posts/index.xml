<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nerdrack as a Solution</title>
    <link>https://nerdrack.com/posts/</link>
    <description>Recent content in Posts on Nerdrack as a Solution</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Nerdrack 2019</copyright>
    <lastBuildDate>Wed, 08 May 2019 09:41:41 -0700</lastBuildDate>
    
	<atom:link href="https://nerdrack.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx Ingress Controller</title>
      <link>https://nerdrack.com/posts/ingress-controller/</link>
      <pubDate>Wed, 08 May 2019 09:41:41 -0700</pubDate>
      
      <guid>https://nerdrack.com/posts/ingress-controller/</guid>
      <description>Ingress Controllers in Kubernetes When I first started with Kubernetes, I was all about NodePort services. They&amp;rsquo;re convienient and easy enough to create; however, soon enough I realized that this was not a scalable solution. NodePort services are ephemeral, meaning your client would never know which port his application resides under (which he shouldn&amp;rsquo;t have to know anyways) and the port numbers are randomly assigned within your specified range (i.</description>
    </item>
    
    <item>
      <title>Hugo Continuous Integration and Deployment</title>
      <link>https://nerdrack.com/posts/hugo-cicd/</link>
      <pubDate>Sun, 14 Apr 2019 21:27:39 -0700</pubDate>
      
      <guid>https://nerdrack.com/posts/hugo-cicd/</guid>
      <description>Hugo inside of a CI/CD pipeline Hugo is a popular open-source framework for building static websites; it&amp;rsquo;s fast, simple, and free as in free beer; however there is a catch, due to it&amp;rsquo;s static nature, Hugo must be recompiled every time you make a change to the site. This means that you&amp;rsquo;d introduce a kink in the development of your website if you are using containerization. Especially inside of a cloud environment.</description>
    </item>
    
  </channel>
</rss>